{"version":3,"sources":["components/Game.js","components/Home.js","components/Nav.js","components/About.js","components/Cell.js","components/App.js","serviceWorker.js","index.js"],"names":["socket","container","width","text_container","display","Home","style","Component","navStyle","color","Nav","className","to","p_container","About","React","Cell","props","state","r","g","b","alive","handleOnCellClick","bind","cell","this","isAlive","setState","colorProps","socketProps","emit","key","cell_row_index","cell_col_index","current_this","on","data","map","obj","ind","reviveCell","killCell","backgroundColor","onClick","n_of_rows","n_of_cols","paddingTop","Game","openSocket","process","toString","num","Math","floor","random","rows","cols","c","push","row_index","board","disconnect","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c307cf8.chunk.js","sourcesContent":["/*\r\n\r\nGame component that opens socket connection to server and sets up the client with a random color.\r\n\r\n*/\r\n\r\nimport React from \"react\";\r\nimport openSocket from \"socket.io-client\";\r\nimport Cell from \"./Cell\";\r\n\r\nlet socket;\r\nconst n_of_rows = 50;\r\nconst n_of_cols = 50;\r\nconst style = {\r\n  paddingTop: \"5vh\"\r\n};\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!socket) {\r\n      socket = openSocket(process.env.REACT_APP_API_URL.toString());\r\n    }\r\n\r\n    const color = [1, 1, 1].map(num => num * Math.floor(Math.random() * 256));\r\n\r\n    const rows = [];\r\n\r\n    for (let r = 0; r < n_of_rows; r++) {\r\n      let cols = [];\r\n      for (let c = 0; c < n_of_cols; c++) {\r\n        cols.push(\r\n          <Cell\r\n            key={[r, c]}\r\n            cell_row_index={c}\r\n            cell_col_index={r}\r\n            socketProps={socket}\r\n            colorProps={color}\r\n          />\r\n        );\r\n      }\r\n\r\n      rows.push(\r\n        <div className=\"row\" key={r} row_index={r}>\r\n          {cols}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    this.state = { board: rows };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"boardContainer\" style={style}>\r\n        {this.state.board}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\n\r\nconst container = {\r\n  width: \"100%\"\r\n};\r\n\r\nconst text_container = {\r\n  display: \"inline-block\"\r\n};\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Welcome</h1>\r\n        <div style={container}>\r\n          <div style={text_container}>\r\n            <p>\r\n              Head to Game to start playing but check out the rules in About\r\n              first\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/App.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst navStyle = {\r\n  color: \"white\"\r\n};\r\n\r\nclass Nav extends Component {\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <h3>Conway's Game of Life</h3>\r\n        <ul className=\"nav-links\">\r\n          <Link style={navStyle} to=\"/about\">\r\n            <li>About</li>\r\n          </Link>\r\n          <Link style={navStyle} to=\"/game\">\r\n            <li>Game</li>\r\n          </Link>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"../styles/About.css\";\r\n\r\nconst container = {\r\n  width: \"100%\"\r\n};\r\n\r\nconst p_container = {\r\n  display: \"inline-block\"\r\n};\r\n\r\nconst div_style = {};\r\n\r\nclass About extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>About</h1>\r\n        <div style={container}>\r\n          <div style={p_container}>\r\n            <p>\r\n              This is a multiplayer game based on the following 4 rules:\r\n              <ul>\r\n                <li>\r\n                  Any live cell with fewer than two live neighbors dies, as if\r\n                  caused by under-population.\r\n                </li>\r\n                <li>\r\n                  Any live cell with two or three live neighbors lives on to the\r\n                  next generation.\r\n                </li>\r\n                <li>\r\n                  Any live cell with more than three live neighbors dies, as if\r\n                  by overcrowding.\r\n                </li>\r\n                <li>\r\n                  Any dead cell with exactly three live neighbors becomes a live\r\n                  cell, as if by reproduction.\r\n                </li>\r\n              </ul>\r\n            </p>\r\n\r\n            <p>Click on a cell to bring it to life.</p>\r\n            <p>The cells evolve every 10 seconds</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","/*\r\n  Cell component that is in the board in Game component. \r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"../styles/Cell.css\";\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { r: 255, g: 255, b: 255, alive: false };\r\n    this.handleOnCellClick = this.handleOnCellClick.bind(this);\r\n  }\r\n\r\n  handleOnCellClick(cell) {\r\n    if (!this.state.isAlive) {\r\n      // if dead then proceed add some color to the Cell's life :) and notify server of event\r\n      this.setState(\r\n        {\r\n          r: this.props.colorProps[0],\r\n          g: this.props.colorProps[1],\r\n          b: this.props.colorProps[2],\r\n          alive: true\r\n        },\r\n        () => {\r\n          this.props.socketProps.emit(\"cellChanged\", {\r\n            key: [this.props.cell_row_index, this.props.cell_col_index],\r\n            color: { r: this.state.r, g: this.state.g, b: this.state.b }\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  // kills cell\r\n  killCell() {\r\n    this.setState({ r: 255, g: 255, b: 255, isAlive: false });\r\n  }\r\n\r\n  // Sets current state\r\n  reviveCell(color) {\r\n    this.setState({ r: color[0], g: color[1], b: color[2], isAlive: true });\r\n  }\r\n\r\n  // Events are decoupled from one another\r\n  componentDidMount() {\r\n    const current_this = this;\r\n\r\n    this.props.socketProps.on(\"newGameState\", function(data) {\r\n      data.map(obj => {\r\n        if (\r\n          obj.ind[0] === current_this.props.cell_row_index &&\r\n          obj.ind[1] === current_this.props.cell_col_index\r\n        ) {\r\n          current_this.reviveCell(obj.color);\r\n        }\r\n      });\r\n    });\r\n\r\n    this.props.socketProps.on(\"deadCells\", function(data) {\r\n      data.map(ind => {\r\n        if (\r\n          ind[0] === current_this.props.cell_row_index &&\r\n          ind[1] === current_this.props.cell_col_index\r\n        ) {\r\n          current_this.killCell();\r\n        }\r\n      });\r\n    });\r\n\r\n    this.props.socketProps.on(\"newCells\", function(data) {\r\n      data.map(obj => {\r\n        if (\r\n          obj.ind[0] === current_this.props.cell_row_index &&\r\n          obj.ind[1] === current_this.props.cell_col_index\r\n        ) {\r\n          current_this.reviveCell(obj.color);\r\n        }\r\n      });\r\n    });\r\n\r\n    this.props.socketProps.on(\"otherChangedCell\", function(data) {\r\n      if (\r\n        data.ind[0] === current_this.props.cell_row_index &&\r\n        data.ind[1] === current_this.props.cell_col_index\r\n      ) {\r\n        current_this.reviveCell(data.color);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: `rgb(${this.state.r}, ${this.state.g}, ${this.state.b})`\r\n        }}\r\n        className=\"cellContainer\"\r\n        onClick={this.handleOnCellClick}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/App.css\";\r\nimport Home from \"./Home\";\r\nimport Nav from \"./Nav\";\r\nimport About from \"./About\";\r\nimport Game from \"./Game\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Nav />\r\n          <Switch>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/about\" component={About} />\r\n            <Route path=\"/game\" component={Game} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}